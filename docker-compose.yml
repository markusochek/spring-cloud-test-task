services:
  kafka-server:
    networks:
      - app-network
    image: apache/kafka:3.7.0
    ports:
      - "9092:9092"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-server:9093
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk

  config-server:
    networks:
      - app-network
    build: ./config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  eureka-server:
    networks:
      - app-network
    build: ./eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server

  kafka-client:
    networks:
      - app-network
    build: ./kafka-client
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - eureka-server
      - kafka-server

networks:
  app-network:
    driver: bridge

#  rabbitmq-client:
#    build: ./rabbitmq-client
#    ports:
#      - "8081:8081"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - config-server
#      - eureka-server

#  api-gateway:
#    build: ./api-gateway
#    ports:
#      - "8765:8765"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - config-server
#      - eureka-server
#      - kafka-client
#      - rabbitmq-client